// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	dbCtx "example.com/api/internal/repository/db"
	mock "github.com/stretchr/testify/mock"
)

// NewMockChatRepo creates a new instance of MockChatRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatRepo {
	mock := &MockChatRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockChatRepo is an autogenerated mock type for the IChatRepo type
type MockChatRepo struct {
	mock.Mock
}

type MockChatRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatRepo) EXPECT() *MockChatRepo_Expecter {
	return &MockChatRepo_Expecter{mock: &_m.Mock}
}

// CreateMessage provides a mock function for the type MockChatRepo
func (_mock *MockChatRepo) CreateMessage(ctx context.Context, params dbCtx.CreateMessageParams) (dbCtx.Message, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 dbCtx.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dbCtx.CreateMessageParams) (dbCtx.Message, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dbCtx.CreateMessageParams) dbCtx.Message); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Get(0).(dbCtx.Message)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dbCtx.CreateMessageParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChatRepo_CreateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessage'
type MockChatRepo_CreateMessage_Call struct {
	*mock.Call
}

// CreateMessage is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockChatRepo_Expecter) CreateMessage(ctx interface{}, params interface{}) *MockChatRepo_CreateMessage_Call {
	return &MockChatRepo_CreateMessage_Call{Call: _e.mock.On("CreateMessage", ctx, params)}
}

func (_c *MockChatRepo_CreateMessage_Call) Run(run func(ctx context.Context, params dbCtx.CreateMessageParams)) *MockChatRepo_CreateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dbCtx.CreateMessageParams))
	})
	return _c
}

func (_c *MockChatRepo_CreateMessage_Call) Return(message dbCtx.Message, err error) *MockChatRepo_CreateMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockChatRepo_CreateMessage_Call) RunAndReturn(run func(ctx context.Context, params dbCtx.CreateMessageParams) (dbCtx.Message, error)) *MockChatRepo_CreateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessages provides a mock function for the type MockChatRepo
func (_mock *MockChatRepo) GetMessages(ctx context.Context, params dbCtx.GetMessagesParams) ([]dbCtx.GetMessagesRow, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []dbCtx.GetMessagesRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dbCtx.GetMessagesParams) ([]dbCtx.GetMessagesRow, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dbCtx.GetMessagesParams) []dbCtx.GetMessagesRow); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbCtx.GetMessagesRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dbCtx.GetMessagesParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChatRepo_GetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessages'
type MockChatRepo_GetMessages_Call struct {
	*mock.Call
}

// GetMessages is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockChatRepo_Expecter) GetMessages(ctx interface{}, params interface{}) *MockChatRepo_GetMessages_Call {
	return &MockChatRepo_GetMessages_Call{Call: _e.mock.On("GetMessages", ctx, params)}
}

func (_c *MockChatRepo_GetMessages_Call) Run(run func(ctx context.Context, params dbCtx.GetMessagesParams)) *MockChatRepo_GetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dbCtx.GetMessagesParams))
	})
	return _c
}

func (_c *MockChatRepo_GetMessages_Call) Return(getMessagesRows []dbCtx.GetMessagesRow, err error) *MockChatRepo_GetMessages_Call {
	_c.Call.Return(getMessagesRows, err)
	return _c
}

func (_c *MockChatRepo_GetMessages_Call) RunAndReturn(run func(ctx context.Context, params dbCtx.GetMessagesParams) ([]dbCtx.GetMessagesRow, error)) *MockChatRepo_GetMessages_Call {
	_c.Call.Return(run)
	return _c
}
