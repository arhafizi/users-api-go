// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"example.com/api/internal/repository"
	dbCtx "example.com/api/internal/repository/db"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepo creates a new instance of MockUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepo {
	mock := &MockUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepo is an autogenerated mock type for the IUserRepo type
type MockUserRepo struct {
	mock.Mock
}

type MockUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepo) EXPECT() *MockUserRepo_Expecter {
	return &MockUserRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) Create(ctx repository.Ctx, arg dbCtx.CreateUserParams) (repository.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, dbCtx.CreateUserParams) (repository.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, dbCtx.CreateUserParams) repository.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.User)
	}
	if returnFunc, ok := ret.Get(1).(func(repository.Ctx, dbCtx.CreateUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockUserRepo_Expecter) Create(ctx interface{}, arg interface{}) *MockUserRepo_Create_Call {
	return &MockUserRepo_Create_Call{Call: _e.mock.On("Create", ctx, arg)}
}

func (_c *MockUserRepo_Create_Call) Run(run func(ctx repository.Ctx, arg dbCtx.CreateUserParams)) *MockUserRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Ctx), args[1].(dbCtx.CreateUserParams))
	})
	return _c
}

func (_c *MockUserRepo_Create_Call) Return(v repository.User, err error) *MockUserRepo_Create_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserRepo_Create_Call) RunAndReturn(run func(ctx repository.Ctx, arg dbCtx.CreateUserParams) (repository.User, error)) *MockUserRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) GetAll(ctx repository.Ctx, arg dbCtx.ListUsersParams) ([]repository.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, dbCtx.ListUsersParams) ([]repository.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, dbCtx.ListUsersParams) []repository.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(repository.Ctx, dbCtx.ListUsersParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockUserRepo_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockUserRepo_Expecter) GetAll(ctx interface{}, arg interface{}) *MockUserRepo_GetAll_Call {
	return &MockUserRepo_GetAll_Call{Call: _e.mock.On("GetAll", ctx, arg)}
}

func (_c *MockUserRepo_GetAll_Call) Run(run func(ctx repository.Ctx, arg dbCtx.ListUsersParams)) *MockUserRepo_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Ctx), args[1].(dbCtx.ListUsersParams))
	})
	return _c
}

func (_c *MockUserRepo_GetAll_Call) Return(vs []repository.User, err error) *MockUserRepo_GetAll_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockUserRepo_GetAll_Call) RunAndReturn(run func(ctx repository.Ctx, arg dbCtx.ListUsersParams) ([]repository.User, error)) *MockUserRepo_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) GetByEmail(ctx repository.Ctx, email string) (repository.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, string) (repository.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, string) repository.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(repository.User)
	}
	if returnFunc, ok := ret.Get(1).(func(repository.Ctx, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserRepo_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserRepo_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserRepo_GetByEmail_Call {
	return &MockUserRepo_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserRepo_GetByEmail_Call) Run(run func(ctx repository.Ctx, email string)) *MockUserRepo_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Ctx), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepo_GetByEmail_Call) Return(v repository.User, err error) *MockUserRepo_GetByEmail_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserRepo_GetByEmail_Call) RunAndReturn(run func(ctx repository.Ctx, email string) (repository.User, error)) *MockUserRepo_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) GetByID(ctx repository.Ctx, id int32) (repository.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, int32) (repository.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, int32) repository.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.User)
	}
	if returnFunc, ok := ret.Get(1).(func(repository.Ctx, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepo_Expecter) GetByID(ctx interface{}, id interface{}) *MockUserRepo_GetByID_Call {
	return &MockUserRepo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUserRepo_GetByID_Call) Run(run func(ctx repository.Ctx, id int32)) *MockUserRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Ctx), args[1].(int32))
	})
	return _c
}

func (_c *MockUserRepo_GetByID_Call) Return(v repository.User, err error) *MockUserRepo_GetByID_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserRepo_GetByID_Call) RunAndReturn(run func(ctx repository.Ctx, id int32) (repository.User, error)) *MockUserRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) GetByUsername(ctx repository.Ctx, username string) (repository.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, string) (repository.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, string) repository.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		r0 = ret.Get(0).(repository.User)
	}
	if returnFunc, ok := ret.Get(1).(func(repository.Ctx, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockUserRepo_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx
//   - username
func (_e *MockUserRepo_Expecter) GetByUsername(ctx interface{}, username interface{}) *MockUserRepo_GetByUsername_Call {
	return &MockUserRepo_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *MockUserRepo_GetByUsername_Call) Run(run func(ctx repository.Ctx, username string)) *MockUserRepo_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Ctx), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepo_GetByUsername_Call) Return(v repository.User, err error) *MockUserRepo_GetByUsername_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserRepo_GetByUsername_Call) RunAndReturn(run func(ctx repository.Ctx, username string) (repository.User, error)) *MockUserRepo_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDelete provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) SoftDelete(ctx repository.Ctx, id int32) (int64, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, int32) (int64, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, int32) int64); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(repository.Ctx, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_SoftDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDelete'
type MockUserRepo_SoftDelete_Call struct {
	*mock.Call
}

// SoftDelete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepo_Expecter) SoftDelete(ctx interface{}, id interface{}) *MockUserRepo_SoftDelete_Call {
	return &MockUserRepo_SoftDelete_Call{Call: _e.mock.On("SoftDelete", ctx, id)}
}

func (_c *MockUserRepo_SoftDelete_Call) Run(run func(ctx repository.Ctx, id int32)) *MockUserRepo_SoftDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Ctx), args[1].(int32))
	})
	return _c
}

func (_c *MockUserRepo_SoftDelete_Call) Return(n int64, err error) *MockUserRepo_SoftDelete_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUserRepo_SoftDelete_Call) RunAndReturn(run func(ctx repository.Ctx, id int32) (int64, error)) *MockUserRepo_SoftDelete_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFull provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) UpdateFull(ctx repository.Ctx, arg dbCtx.UpdateUserFullParams) (repository.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFull")
	}

	var r0 repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, dbCtx.UpdateUserFullParams) (repository.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, dbCtx.UpdateUserFullParams) repository.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.User)
	}
	if returnFunc, ok := ret.Get(1).(func(repository.Ctx, dbCtx.UpdateUserFullParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_UpdateFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFull'
type MockUserRepo_UpdateFull_Call struct {
	*mock.Call
}

// UpdateFull is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockUserRepo_Expecter) UpdateFull(ctx interface{}, arg interface{}) *MockUserRepo_UpdateFull_Call {
	return &MockUserRepo_UpdateFull_Call{Call: _e.mock.On("UpdateFull", ctx, arg)}
}

func (_c *MockUserRepo_UpdateFull_Call) Run(run func(ctx repository.Ctx, arg dbCtx.UpdateUserFullParams)) *MockUserRepo_UpdateFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Ctx), args[1].(dbCtx.UpdateUserFullParams))
	})
	return _c
}

func (_c *MockUserRepo_UpdateFull_Call) Return(v repository.User, err error) *MockUserRepo_UpdateFull_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserRepo_UpdateFull_Call) RunAndReturn(run func(ctx repository.Ctx, arg dbCtx.UpdateUserFullParams) (repository.User, error)) *MockUserRepo_UpdateFull_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePartial provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) UpdatePartial(ctx repository.Ctx, arg dbCtx.UpdateUserPartialParams) (repository.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePartial")
	}

	var r0 repository.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, dbCtx.UpdateUserPartialParams) (repository.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(repository.Ctx, dbCtx.UpdateUserPartialParams) repository.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(repository.User)
	}
	if returnFunc, ok := ret.Get(1).(func(repository.Ctx, dbCtx.UpdateUserPartialParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_UpdatePartial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePartial'
type MockUserRepo_UpdatePartial_Call struct {
	*mock.Call
}

// UpdatePartial is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockUserRepo_Expecter) UpdatePartial(ctx interface{}, arg interface{}) *MockUserRepo_UpdatePartial_Call {
	return &MockUserRepo_UpdatePartial_Call{Call: _e.mock.On("UpdatePartial", ctx, arg)}
}

func (_c *MockUserRepo_UpdatePartial_Call) Run(run func(ctx repository.Ctx, arg dbCtx.UpdateUserPartialParams)) *MockUserRepo_UpdatePartial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Ctx), args[1].(dbCtx.UpdateUserPartialParams))
	})
	return _c
}

func (_c *MockUserRepo_UpdatePartial_Call) Return(v repository.User, err error) *MockUserRepo_UpdatePartial_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserRepo_UpdatePartial_Call) RunAndReturn(run func(ctx repository.Ctx, arg dbCtx.UpdateUserPartialParams) (repository.User, error)) *MockUserRepo_UpdatePartial_Call {
	_c.Call.Return(run)
	return _c
}
