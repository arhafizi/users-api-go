// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	dbCtx "example.com/api/internal/repository/db"
	mock "github.com/stretchr/testify/mock"
)

// NewMockChatService creates a new instance of MockChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatService {
	mock := &MockChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockChatService is an autogenerated mock type for the IChatService type
type MockChatService struct {
	mock.Mock
}

type MockChatService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatService) EXPECT() *MockChatService_Expecter {
	return &MockChatService_Expecter{mock: &_m.Mock}
}

// GetMessages provides a mock function for the type MockChatService
func (_mock *MockChatService) GetMessages(ctx context.Context, limit int32, offset int32) ([]dbCtx.GetMessagesRow, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []dbCtx.GetMessagesRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32, int32) ([]dbCtx.GetMessagesRow, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32, int32) []dbCtx.GetMessagesRow); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbCtx.GetMessagesRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChatService_GetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessages'
type MockChatService_GetMessages_Call struct {
	*mock.Call
}

// GetMessages is a helper method to define mock.On call
//   - ctx
//   - limit
//   - offset
func (_e *MockChatService_Expecter) GetMessages(ctx interface{}, limit interface{}, offset interface{}) *MockChatService_GetMessages_Call {
	return &MockChatService_GetMessages_Call{Call: _e.mock.On("GetMessages", ctx, limit, offset)}
}

func (_c *MockChatService_GetMessages_Call) Run(run func(ctx context.Context, limit int32, offset int32)) *MockChatService_GetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32))
	})
	return _c
}

func (_c *MockChatService_GetMessages_Call) Return(getMessagesRows []dbCtx.GetMessagesRow, err error) *MockChatService_GetMessages_Call {
	_c.Call.Return(getMessagesRows, err)
	return _c
}

func (_c *MockChatService_GetMessages_Call) RunAndReturn(run func(ctx context.Context, limit int32, offset int32) ([]dbCtx.GetMessagesRow, error)) *MockChatService_GetMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMessage provides a mock function for the type MockChatService
func (_mock *MockChatService) SaveMessage(ctx context.Context, senderID int32, content string) error {
	ret := _mock.Called(ctx, senderID, content)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32, string) error); ok {
		r0 = returnFunc(ctx, senderID, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChatService_SaveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMessage'
type MockChatService_SaveMessage_Call struct {
	*mock.Call
}

// SaveMessage is a helper method to define mock.On call
//   - ctx
//   - senderID
//   - content
func (_e *MockChatService_Expecter) SaveMessage(ctx interface{}, senderID interface{}, content interface{}) *MockChatService_SaveMessage_Call {
	return &MockChatService_SaveMessage_Call{Call: _e.mock.On("SaveMessage", ctx, senderID, content)}
}

func (_c *MockChatService_SaveMessage_Call) Run(run func(ctx context.Context, senderID int32, content string)) *MockChatService_SaveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *MockChatService_SaveMessage_Call) Return(err error) *MockChatService_SaveMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChatService_SaveMessage_Call) RunAndReturn(run func(ctx context.Context, senderID int32, content string) error) *MockChatService_SaveMessage_Call {
	_c.Call.Return(run)
	return _c
}
