// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockHashService creates a new instance of MockHashService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHashService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHashService {
	mock := &MockHashService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHashService is an autogenerated mock type for the IHashService type
type MockHashService struct {
	mock.Mock
}

type MockHashService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHashService) EXPECT() *MockHashService_Expecter {
	return &MockHashService_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function for the type MockHashService
func (_mock *MockHashService) Compare(hashedPassword string, password string) error {
	ret := _mock.Called(hashedPassword, password)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(hashedPassword, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHashService_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockHashService_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - hashedPassword
//   - password
func (_e *MockHashService_Expecter) Compare(hashedPassword interface{}, password interface{}) *MockHashService_Compare_Call {
	return &MockHashService_Compare_Call{Call: _e.mock.On("Compare", hashedPassword, password)}
}

func (_c *MockHashService_Compare_Call) Run(run func(hashedPassword string, password string)) *MockHashService_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockHashService_Compare_Call) Return(err error) *MockHashService_Compare_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHashService_Compare_Call) RunAndReturn(run func(hashedPassword string, password string) error) *MockHashService_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function for the type MockHashService
func (_mock *MockHashService) Hash(password string) (string, error) {
	ret := _mock.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(password)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHashService_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockHashService_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - password
func (_e *MockHashService_Expecter) Hash(password interface{}) *MockHashService_Hash_Call {
	return &MockHashService_Hash_Call{Call: _e.mock.On("Hash", password)}
}

func (_c *MockHashService_Hash_Call) Run(run func(password string)) *MockHashService_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHashService_Hash_Call) Return(s string, err error) *MockHashService_Hash_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockHashService_Hash_Call) RunAndReturn(run func(password string) (string, error)) *MockHashService_Hash_Call {
	_c.Call.Return(run)
	return _c
}
