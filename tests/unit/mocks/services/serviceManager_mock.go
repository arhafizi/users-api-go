// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"example.com/api/internal/services"
	"example.com/api/internal/services/chat"
	"example.com/api/internal/services/hashing"
	"example.com/api/internal/storage"
	"example.com/api/internal/storage/cache"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceManager creates a new instance of MockServiceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceManager {
	mock := &MockServiceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceManager is an autogenerated mock type for the IServiceManager type
type MockServiceManager struct {
	mock.Mock
}

type MockServiceManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceManager) EXPECT() *MockServiceManager_Expecter {
	return &MockServiceManager_Expecter{mock: &_m.Mock}
}

// Auth provides a mock function for the type MockServiceManager
func (_mock *MockServiceManager) Auth() services.IAuthService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 services.IAuthService
	if returnFunc, ok := ret.Get(0).(func() services.IAuthService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.IAuthService)
		}
	}
	return r0
}

// MockServiceManager_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type MockServiceManager_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
func (_e *MockServiceManager_Expecter) Auth() *MockServiceManager_Auth_Call {
	return &MockServiceManager_Auth_Call{Call: _e.mock.On("Auth")}
}

func (_c *MockServiceManager_Auth_Call) Run(run func()) *MockServiceManager_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceManager_Auth_Call) Return(iAuthService services.IAuthService) *MockServiceManager_Auth_Call {
	_c.Call.Return(iAuthService)
	return _c
}

func (_c *MockServiceManager_Auth_Call) RunAndReturn(run func() services.IAuthService) *MockServiceManager_Auth_Call {
	_c.Call.Return(run)
	return _c
}

// CacheStorage provides a mock function for the type MockServiceManager
func (_mock *MockServiceManager) CacheStorage() cache.ICacheService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CacheStorage")
	}

	var r0 cache.ICacheService
	if returnFunc, ok := ret.Get(0).(func() cache.ICacheService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.ICacheService)
		}
	}
	return r0
}

// MockServiceManager_CacheStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheStorage'
type MockServiceManager_CacheStorage_Call struct {
	*mock.Call
}

// CacheStorage is a helper method to define mock.On call
func (_e *MockServiceManager_Expecter) CacheStorage() *MockServiceManager_CacheStorage_Call {
	return &MockServiceManager_CacheStorage_Call{Call: _e.mock.On("CacheStorage")}
}

func (_c *MockServiceManager_CacheStorage_Call) Run(run func()) *MockServiceManager_CacheStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceManager_CacheStorage_Call) Return(iCacheService cache.ICacheService) *MockServiceManager_CacheStorage_Call {
	_c.Call.Return(iCacheService)
	return _c
}

func (_c *MockServiceManager_CacheStorage_Call) RunAndReturn(run func() cache.ICacheService) *MockServiceManager_CacheStorage_Call {
	_c.Call.Return(run)
	return _c
}

// Chat provides a mock function for the type MockServiceManager
func (_mock *MockServiceManager) Chat() chat.IChatService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 chat.IChatService
	if returnFunc, ok := ret.Get(0).(func() chat.IChatService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chat.IChatService)
		}
	}
	return r0
}

// MockServiceManager_Chat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chat'
type MockServiceManager_Chat_Call struct {
	*mock.Call
}

// Chat is a helper method to define mock.On call
func (_e *MockServiceManager_Expecter) Chat() *MockServiceManager_Chat_Call {
	return &MockServiceManager_Chat_Call{Call: _e.mock.On("Chat")}
}

func (_c *MockServiceManager_Chat_Call) Run(run func()) *MockServiceManager_Chat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceManager_Chat_Call) Return(iChatService chat.IChatService) *MockServiceManager_Chat_Call {
	_c.Call.Return(iChatService)
	return _c
}

func (_c *MockServiceManager_Chat_Call) RunAndReturn(run func() chat.IChatService) *MockServiceManager_Chat_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function for the type MockServiceManager
func (_mock *MockServiceManager) Hash() hashing.IHashService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 hashing.IHashService
	if returnFunc, ok := ret.Get(0).(func() hashing.IHashService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(hashing.IHashService)
		}
	}
	return r0
}

// MockServiceManager_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockServiceManager_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
func (_e *MockServiceManager_Expecter) Hash() *MockServiceManager_Hash_Call {
	return &MockServiceManager_Hash_Call{Call: _e.mock.On("Hash")}
}

func (_c *MockServiceManager_Hash_Call) Run(run func()) *MockServiceManager_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceManager_Hash_Call) Return(iHashService hashing.IHashService) *MockServiceManager_Hash_Call {
	_c.Call.Return(iHashService)
	return _c
}

func (_c *MockServiceManager_Hash_Call) RunAndReturn(run func() hashing.IHashService) *MockServiceManager_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// TokenStorage provides a mock function for the type MockServiceManager
func (_mock *MockServiceManager) TokenStorage() storage.ITokenStorage {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TokenStorage")
	}

	var r0 storage.ITokenStorage
	if returnFunc, ok := ret.Get(0).(func() storage.ITokenStorage); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ITokenStorage)
		}
	}
	return r0
}

// MockServiceManager_TokenStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenStorage'
type MockServiceManager_TokenStorage_Call struct {
	*mock.Call
}

// TokenStorage is a helper method to define mock.On call
func (_e *MockServiceManager_Expecter) TokenStorage() *MockServiceManager_TokenStorage_Call {
	return &MockServiceManager_TokenStorage_Call{Call: _e.mock.On("TokenStorage")}
}

func (_c *MockServiceManager_TokenStorage_Call) Run(run func()) *MockServiceManager_TokenStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceManager_TokenStorage_Call) Return(iTokenStorage storage.ITokenStorage) *MockServiceManager_TokenStorage_Call {
	_c.Call.Return(iTokenStorage)
	return _c
}

func (_c *MockServiceManager_TokenStorage_Call) RunAndReturn(run func() storage.ITokenStorage) *MockServiceManager_TokenStorage_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function for the type MockServiceManager
func (_mock *MockServiceManager) User() services.IUserService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 services.IUserService
	if returnFunc, ok := ret.Get(0).(func() services.IUserService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.IUserService)
		}
	}
	return r0
}

// MockServiceManager_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockServiceManager_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *MockServiceManager_Expecter) User() *MockServiceManager_User_Call {
	return &MockServiceManager_User_Call{Call: _e.mock.On("User")}
}

func (_c *MockServiceManager_User_Call) Run(run func()) *MockServiceManager_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceManager_User_Call) Return(iUserService services.IUserService) *MockServiceManager_User_Call {
	_c.Call.Return(iUserService)
	return _c
}

func (_c *MockServiceManager_User_Call) RunAndReturn(run func() services.IUserService) *MockServiceManager_User_Call {
	_c.Call.Return(run)
	return _c
}
