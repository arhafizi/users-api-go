// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	dto "example.com/api/internal/contracts"
	dbCtx "example.com/api/internal/repository/db"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the IUserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserService
func (_mock *MockUserService) Create(ctx context.Context, arg dto.CreateUserReq) (*dto.UserResponse, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dto.UserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateUserReq) (*dto.UserResponse, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateUserReq) *dto.UserResponse); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.CreateUserReq) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockUserService_Expecter) Create(ctx interface{}, arg interface{}) *MockUserService_Create_Call {
	return &MockUserService_Create_Call{Call: _e.mock.On("Create", ctx, arg)}
}

func (_c *MockUserService_Create_Call) Run(run func(ctx context.Context, arg dto.CreateUserReq)) *MockUserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateUserReq))
	})
	return _c
}

func (_c *MockUserService_Create_Call) Return(userResponse *dto.UserResponse, err error) *MockUserService_Create_Call {
	_c.Call.Return(userResponse, err)
	return _c
}

func (_c *MockUserService_Create_Call) RunAndReturn(run func(ctx context.Context, arg dto.CreateUserReq) (*dto.UserResponse, error)) *MockUserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockUserService
func (_mock *MockUserService) GetAll(ctx context.Context, arg dto.ListUsersParams) ([]dbCtx.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []dbCtx.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.ListUsersParams) ([]dbCtx.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.ListUsersParams) []dbCtx.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbCtx.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.ListUsersParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockUserService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockUserService_Expecter) GetAll(ctx interface{}, arg interface{}) *MockUserService_GetAll_Call {
	return &MockUserService_GetAll_Call{Call: _e.mock.On("GetAll", ctx, arg)}
}

func (_c *MockUserService_GetAll_Call) Run(run func(ctx context.Context, arg dto.ListUsersParams)) *MockUserService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ListUsersParams))
	})
	return _c
}

func (_c *MockUserService_GetAll_Call) Return(users []dbCtx.User, err error) *MockUserService_GetAll_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserService_GetAll_Call) RunAndReturn(run func(ctx context.Context, arg dto.ListUsersParams) ([]dbCtx.User, error)) *MockUserService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserService
func (_mock *MockUserService) GetByEmail(ctx context.Context, email string) (*dbCtx.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *dbCtx.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dbCtx.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dbCtx.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbCtx.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserService_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserService_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserService_GetByEmail_Call {
	return &MockUserService_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserService_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserService_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetByEmail_Call) Return(user *dbCtx.User, err error) *MockUserService_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*dbCtx.User, error)) *MockUserService_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockUserService
func (_mock *MockUserService) GetByID(ctx context.Context, id int32) (*dbCtx.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *dbCtx.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (*dbCtx.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) *dbCtx.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbCtx.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) GetByID(ctx interface{}, id interface{}) *MockUserService_GetByID_Call {
	return &MockUserService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUserService_GetByID_Call) Run(run func(ctx context.Context, id int32)) *MockUserService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockUserService_GetByID_Call) Return(user *dbCtx.User, err error) *MockUserService_GetByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int32) (*dbCtx.User, error)) *MockUserService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type MockUserService
func (_mock *MockUserService) GetByUsername(ctx context.Context, username string) (*dbCtx.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *dbCtx.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dbCtx.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dbCtx.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbCtx.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockUserService_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx
//   - username
func (_e *MockUserService_Expecter) GetByUsername(ctx interface{}, username interface{}) *MockUserService_GetByUsername_Call {
	return &MockUserService_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *MockUserService_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserService_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetByUsername_Call) Return(user *dbCtx.User, err error) *MockUserService_GetByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*dbCtx.User, error)) *MockUserService_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDelete provides a mock function for the type MockUserService
func (_mock *MockUserService) SoftDelete(ctx context.Context, id int32) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_SoftDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDelete'
type MockUserService_SoftDelete_Call struct {
	*mock.Call
}

// SoftDelete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) SoftDelete(ctx interface{}, id interface{}) *MockUserService_SoftDelete_Call {
	return &MockUserService_SoftDelete_Call{Call: _e.mock.On("SoftDelete", ctx, id)}
}

func (_c *MockUserService_SoftDelete_Call) Run(run func(ctx context.Context, id int32)) *MockUserService_SoftDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockUserService_SoftDelete_Call) Return(err error) *MockUserService_SoftDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_SoftDelete_Call) RunAndReturn(run func(ctx context.Context, id int32) error) *MockUserService_SoftDelete_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFull provides a mock function for the type MockUserService
func (_mock *MockUserService) UpdateFull(ctx context.Context, arg dto.UpdateUserFullReq) (*dbCtx.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFull")
	}

	var r0 *dbCtx.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateUserFullReq) (*dbCtx.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateUserFullReq) *dbCtx.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbCtx.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.UpdateUserFullReq) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_UpdateFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFull'
type MockUserService_UpdateFull_Call struct {
	*mock.Call
}

// UpdateFull is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockUserService_Expecter) UpdateFull(ctx interface{}, arg interface{}) *MockUserService_UpdateFull_Call {
	return &MockUserService_UpdateFull_Call{Call: _e.mock.On("UpdateFull", ctx, arg)}
}

func (_c *MockUserService_UpdateFull_Call) Run(run func(ctx context.Context, arg dto.UpdateUserFullReq)) *MockUserService_UpdateFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UpdateUserFullReq))
	})
	return _c
}

func (_c *MockUserService_UpdateFull_Call) Return(user *dbCtx.User, err error) *MockUserService_UpdateFull_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_UpdateFull_Call) RunAndReturn(run func(ctx context.Context, arg dto.UpdateUserFullReq) (*dbCtx.User, error)) *MockUserService_UpdateFull_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePartial provides a mock function for the type MockUserService
func (_mock *MockUserService) UpdatePartial(ctx context.Context, arg dto.UpdateUserPartialReq) (*dbCtx.User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePartial")
	}

	var r0 *dbCtx.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateUserPartialReq) (*dbCtx.User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.UpdateUserPartialReq) *dbCtx.User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbCtx.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.UpdateUserPartialReq) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_UpdatePartial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePartial'
type MockUserService_UpdatePartial_Call struct {
	*mock.Call
}

// UpdatePartial is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockUserService_Expecter) UpdatePartial(ctx interface{}, arg interface{}) *MockUserService_UpdatePartial_Call {
	return &MockUserService_UpdatePartial_Call{Call: _e.mock.On("UpdatePartial", ctx, arg)}
}

func (_c *MockUserService_UpdatePartial_Call) Run(run func(ctx context.Context, arg dto.UpdateUserPartialReq)) *MockUserService_UpdatePartial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UpdateUserPartialReq))
	})
	return _c
}

func (_c *MockUserService_UpdatePartial_Call) Return(user *dbCtx.User, err error) *MockUserService_UpdatePartial_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_UpdatePartial_Call) RunAndReturn(run func(ctx context.Context, arg dto.UpdateUserPartialReq) (*dbCtx.User, error)) *MockUserService_UpdatePartial_Call {
	_c.Call.Return(run)
	return _c
}
